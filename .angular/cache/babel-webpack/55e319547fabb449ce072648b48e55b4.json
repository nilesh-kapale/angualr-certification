{"ast":null,"code":"import _classCallCheck from \"D:\\\\work\\\\other\\\\ng-certification-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"D:\\\\work\\\\other\\\\ng-certification-master\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport * as i0 from \"@angular/core\";\n/**\r\n * This service class provides storage facility for entered locations.\r\n *\r\n */\n\nexport var StorageService = /*#__PURE__*/(function () {\n  var StorageService = /*#__PURE__*/function () {\n    function StorageService() {\n      _classCallCheck(this, StorageService);\n\n      this.locationList = this.getStoredLocationList();\n    }\n    /**\r\n     * This method is used to update location list.\r\n     *\r\n     * @param location number\r\n     */\n\n\n    _createClass(StorageService, [{\n      key: \"store\",\n      value: function store(location) {\n        var isStored = true;\n\n        if (!this.isExist(location)) {\n          this.locationList.push(location);\n          this.update();\n        } else {\n          isStored = false;\n        }\n\n        return isStored;\n      }\n      /**\r\n       * This method is used to remove given location from List.\r\n       * @param location number\r\n       */\n\n    }, {\n      key: \"removeLocation\",\n      value: function removeLocation(location) {\n        this.locationList = this.locationList.filter(function (loc) {\n          return loc !== location;\n        });\n        this.update();\n      }\n      /**\r\n       * This method is used to check entered location already exist on in list or not.\r\n       *\r\n       * @param location number\r\n       * @returns boolean\r\n       */\n\n    }, {\n      key: \"isExist\",\n      value: function isExist(location) {\n        return this.locationList.indexOf(location) > -1;\n      }\n      /**\r\n       * This method is used to update locations array in local storage.\r\n       */\n\n    }, {\n      key: \"update\",\n      value: function update() {\n        localStorage.setItem('locations', JSON.stringify(this.locationList));\n      }\n      /**\r\n       * This method returns stored location on local storage list.\r\n       *\r\n       * @returns location list.\r\n       */\n\n    }, {\n      key: \"getStoredLocationList\",\n      value: function getStoredLocationList() {\n        var locationList = localStorage.getItem('locations');\n        return !!locationList ? JSON.parse(locationList) : [];\n      }\n    }]);\n\n    return StorageService;\n  }();\n\n  StorageService.ɵfac = function StorageService_Factory(t) {\n    return new (t || StorageService)();\n  };\n\n  StorageService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StorageService,\n    factory: StorageService.ɵfac,\n    providedIn: 'root'\n  });\n  return StorageService;\n})();","map":null,"metadata":{},"sourceType":"module"}